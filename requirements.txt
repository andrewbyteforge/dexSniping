# Requirements.txt - Compatible Web3 Stack
# File: requirements.txt

# Core Framework
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
pydantic-settings==2.1.0

# Database
sqlalchemy==2.0.23
alembic==1.13.0
asyncpg==0.29.0

# Web3 Stack - Compatible Versions
web3==6.11.3
eth-account==0.10.0
eth-utils==2.3.1
eth-typing==3.6.0
eth-hash[pycryptodome]==0.5.2
eth-abi==4.2.1
hexbytes==0.3.1

# HTTP and Async
httpx==0.25.2
aiohttp==3.9.1
requests==2.31.0

# Data Processing
pandas==2.1.4
numpy==1.25.2

# Testing Stack
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-mock==3.12.0
pytest-cov==4.1.0

# Utilities
python-dotenv==1.0.0
python-multipart==0.0.6
loguru==0.7.2

# Development
black==23.12.0
flake8==6.1.0
mypy==1.7.1

# Optional: Analysis tools
jupyter==1.0.0
matplotlib==3.8.2

# DEX Sniper Pro Requirements
# File: requirements.txt
# Updated for Phase 4B: Live Blockchain Integration

# ==============================================
# CORE WEB FRAMEWORK
# ==============================================
fastapi==0.104.1
uvicorn[standard]==0.24.0
jinja2==3.1.2
python-multipart==0.0.6

# ==============================================
# BLOCKCHAIN & WEB3 LIBRARIES
# ==============================================
web3==6.12.0
eth-account==0.9.0
eth-utils==2.2.2
eth-abi==4.2.1
eth-hash==0.5.2
hexbytes==0.3.1

# ==============================================
# ASYNC & NETWORKING
# ==============================================
aiohttp==3.9.1
aiofiles==23.2.1
httpx==0.25.2
websockets==12.0
requests==2.31.0

# ==============================================
# DATA PROCESSING
# ==============================================
pandas==2.1.3
numpy==1.25.2
decimal==1.9.2

# ==============================================
# DATABASE & ORM
# ==============================================
sqlalchemy==2.0.23
alembic==1.12.1
asyncpg==0.29.0
sqlite==3.42.0

# ==============================================
# CONFIGURATION & ENVIRONMENT
# ==============================================
python-dotenv==1.0.0
pydantic==2.5.0
pydantic-settings==2.1.0

# ==============================================
# TESTING FRAMEWORK
# ==============================================
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-mock==3.12.0

# ==============================================
# LOGGING & MONITORING
# ==============================================
loguru==0.7.2
structlog==23.2.0

# ==============================================
# TRADING & FINANCIAL
# ==============================================
ccxt==4.1.49
python-binance==1.0.19

# ==============================================
# SECURITY & AUTHENTICATION
# ==============================================
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
cryptography==41.0.7

# ==============================================
# UTILITIES
# ==============================================
python-dateutil==2.8.2
schedule==1.2.0
retry==0.9.2

# ==============================================
# DEV DEPENDENCIES (OPTIONAL)
# ==============================================
black==23.11.0
flake8==6.1.0
mypy==1.7.1
pre-commit==3.5.0

# ==============================================
# BLOCKCHAIN PROVIDER SPECIFIC
# ==============================================
# For Infura integration
infura==0.1.0

# For enhanced Web3 functionality
web3[tester]==6.12.0

# For smart contract interaction
eth-brownie==1.20.0

# ==============================================
# INSTALLATION NOTES
# ==============================================

# BASIC INSTALLATION:
# pip install -r requirements.txt

# DEVELOPMENT INSTALLATION:
# pip install -r requirements.txt
# pip install black flake8 mypy pre-commit

# VERIFICATION:
# python -c "import web3; print(f'Web3 version: {web3.__version__}')"
# python -c "import fastapi; print('FastAPI imported successfully')"
# python -c "from eth_account import Account; print('eth-account working')"

# BLOCKCHAIN CONNECTION TEST:
# python -c "
# from web3 import Web3
# w3 = Web3(Web3.HTTPProvider('https://eth.llamarpc.com'))
# print(f'Connected: {w3.is_connected()}')
# print(f'Latest block: {w3.eth.block_number}')
# "

# ==============================================
# PRODUCTION NOTES
# ==============================================

# For production deployment, also consider:
# - gunicorn for WSGI server
# - redis for caching
# - celery for background tasks
# - prometheus for metrics
# - docker for containerization

# Additional production packages:
# gunicorn==21.2.0
# redis==5.0.1
# celery==5.3.4
# prometheus-client==0.19.0


# Optimized Requirements - Phase 4B Working Setup
# File: requirements.txt

# Core Framework - Required
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
jinja2==3.1.2
python-multipart==0.0.6

# Web3 Stack - Latest compatible versions
web3==6.12.0
eth-account==0.9.0
eth-utils==2.2.2
eth-abi==4.2.1

# Server-Sent Events for live streaming
sse-starlette==1.6.5

# Async & HTTP
aiohttp==3.9.1
httpx==0.25.2

# Utilities
python-dotenv==1.0.0

# Development
pytest==7.4.3
pytest-asyncio==0.21.1

# Optional security dependencies
PyJWT==2.8.0  # For production JWT tokens
cryptography==41.0.7  # For advanced encryption
passlib==1.7.4  # For password hashing
